/* 引入 interface.uts 文件中定义的变量 */

import clientModule from "libmarswrapper.so"
import { pinyin4js } from '@ohos/pinyin4js';

import {FailCallback, StringCallback, SuccessCallback, VoidCallback} from "../interface.uts";
let wfcEventListener: null | ((value: object) => void) = null

export function pinyin(str: string, options: object): string[] {
    // return _pinyin(str, options)
    let ch: string = pinyin4js.getShortPinyin(str.substring(0, 1)).toUpperCase() as string
    return [ch]
}

export function initProto(): void {
    // TODO
    // 这儿拿不到 context，暂时放到了 entryAbility 里面去设置 dbpath
    // const context: Context =  getContext();
    // clientModule.setDBPath(context.filesDir);

    //     'onChannelInfoUpdate': this.onChannelInfoUpdate,
    //     'onClearMessage': null,
    //     'onConferenceEvent': this.onConferenceEvent,
    //     'onConnectToServer': this.onConnectToServer,
    //     'onConnectionStatusChange': this.onConnectionChanged,
    //     'onConversationDraftUpdate': null,
    //     'onDeleteMessage': this.onDeleteRemoteMessage,
    //     'onFriendListUpdate': this.onFriendListUpdate,
    //     'onFriendRequestUpdate': this.onFriendRequestUpdate,
    //     'onGroupInfoUpdate': this.onGroupInfoUpdate,
    //     'onGroupMembersUpdate': this.onGroupMemberUpdateListener,
    //     'onServiceConnected': null,
    //     'onMessageDelivered': this.onUserReceivedMessage,
    //     'onMessageRead': this.onUserReadedMessage,
    //     'onMessageUpdate': this.onMessageUpdate,
    //     'onReceiveMessage': this.onReceiveMessage,
    //     'onRecallMessage': this.onRecallMessage,
    //     'onConversationRemove': null,
    //     'onSettingUpdate': this.onSettingUpdate,
    //     'onTrafficData': null,
    //     'onUserInfoUpdate': this.onUserInfoUpdate,
    //     'onUserOnlineEvent': this.onOnlineEvent,
    //     // sendMessageListener
    //     'onSendSuccess': this.onSendSuccess,
    //     'onSendFail': this.onSendFail,
    //     'onSendPrepare': this.onSendPrepare,
    //     'onProgress': this.onProgress,
    //     'onMediaUpload': this.onMediaUpload,

    clientModule.setConnectionStatusListener(genWfcEventListener('onConnectionStatusChange'))

    clientModule.setConnectToServerListener(genWfcEventListener('onConnectToServer'))
    clientModule.setReceiveMessageListener(genWfcEventListener('onReceiveMessage'),
        genWfcEventListener('onRecallMessage'),
        genWfcEventListener('onDeleteMessage'),
        genWfcEventListener('onMessageDelivered'),
        genWfcEventListener('onMessageRead'));

    // clientModule.setProtoEventListener('onSendMessage', (message) => {
    //     let msg = Message.fromProtoMessage(JSON.parse(message));
    //     self.eventEmitter!.emit(EventType.SendMessage, msg);
    // });

    // clientModule.setProtoEventListener('onMessageStatusUpdate', (message) => {
    //     let msg = Message.fromProtoMessage(JSON.parse(message));
    //     self.eventEmitter!.emit(EventType.MessageStatusUpdate, msg);
    // });

    clientModule.setConferenceEventListener(genWfcEventListener('onConferenceEvent'));
    clientModule.setOnlineEventListener(genWfcEventListener('onUserOnlineEvent'));
    clientModule.setUserInfoUpdateListener(genWfcEventListener('onUserInfoUpdate'));
    clientModule.setFriendUpdateListener(genWfcEventListener('onFriendListUpdate'));
    clientModule.setFriendRequestListener(genWfcEventListener('onFriendRequestUpdate'));
    clientModule.setGroupInfoUpdateListener(genWfcEventListener('onGroupInfoUpdate'));
    clientModule.setSettingUpdateListener(genWfcEventListener('onSettingUpdate'));
    clientModule.setChannelInfoUpdateListener(genWfcEventListener('onChannelInfoUpdate'));
    clientModule.setGroupMemberUpdateListener(genWfcEventListener('onGroupMembersUpdate'));

    // clientModule.setSecretChatStateListener(self.onSecretChatStateChangedListener);
    // clientModule.setSecretMessageBurnStateListener(self.onSecretMessageStartBurningListener, self.onSecretMessageBurnedListener)
    // clientModule.setSecretMessageBurnStateListener(self.onSecretMessageStartBurningListener, self.onSecretMessageBurnedListener);
}

@UTSJS.keepAlive
export function onWfcEventListener(listener: (args: object) => void) {
    wfcEventListener = listener
}

export const getClientId = function (): string {
    return clientModule.getClientId();
}

export function connect(imHost: string, userId: string, token: string): void {
    clientModule.connect(userId, token)
}

export function getConnectionStatus(): number {
    return clientModule.getConnectionStatus();
}

export function registerMessageFlag(type: number, flag: number) {
    clientModule.registerMessageFlag(type, flag)
}

export function useSM4() {
    clientModule.useSM4()
}

export function setProxyInfo(host: string, ip: string, port: number, userName: string, password: string) {
    clientModule.setProxyInfo(host, ip, port, userName, password)
}


export function disconnect(disablePush: boolean, clearSession: boolean) {
    clientModule.disconnect(disablePush, clearSession)
}

// export const getUserId = function (): string {
//     return clientModule.getUserId();
// }

export function addHttpHeader(header: string, value: string) {
    clientModule.addHttpHeader(header, value)
}


export function addMembers(groupId: string, memberIds: string[], extra: string, notifyLines: number[], notifyContentStr: string, successCB: () => void, failCB: (err: object) => void) {
    clientModule.addMembers(memberIds, groupId, extra, notifyLines, notifyContentStr, (_: object) => {
        successCB()
    }, failCB)
}

export function getConversationInfos(types: number[], lines: number[]): string {
    return clientModule.getConversationInfos(types, lines);
}

export function getUserSettings(scope: number): string {
    return clientModule.getUserSettings(scope)
}

export function getGroupInfo(groupId: string, fresh: boolean): string {
    return clientModule.getGroupInfo(groupId, fresh)
}

export function getUserInfo(userId: string, fresh: boolean, groupId: string): string {
    return clientModule.getUserInfo(userId, fresh, groupId)
}

export function getGroupMembers(groupId: string, fresh: boolean): string {
    return clientModule.getGroupMembers(groupId, fresh);
}

export function getUserInfos(userIds: string[], groupId: string): string {
    return clientModule.getUserInfos(userIds, groupId);
}

export function getConversationInfo(conversation: string): string {
    return clientModule.getConversationInfo(conversation)
}

export function getListenedChannels(): string {
    // TODO
    //return clientModule.getListenedChannels();
    return ""

}

export function getChannelInfo(channelId: string, refresh: boolean): string {
    return clientModule.getChannelInfo(channelId, refresh)
}

export function getMyFriendList(fresh: boolean): string {
    return clientModule.getMyFriendList(fresh)
}

export function getFavGroups(): string {
    return clientModule.getFavGroups()
}

export function getFavUsers(): string {
    return clientModule.getFavUsers();
}

export function getIncommingFriendRequest(): string {
    return clientModule.getIncommingFriendRequest();
}

export function getGroupInfos(groupIds: string[], fresh: boolean): string {
    return clientModule.getGroupInfos(groupIds, fresh)
    // return ''
}

export function getUnreadFriendRequestStatus(): number {
    return clientModule.getUnreadFriendRequestStatus()
}

export function isFavGroup(groupId: string): boolean {
    return clientModule.isFavGroup(groupId) === 1
}

export function getAuthCode(appId: string, appType: number, host: string, successCB: StringCallback, failCB: (err: object) => void) {
    clientModule.getAuthCode(appId, appType, host, (value: string) => {
        successCB(value)
    }, failCB)
}

export function isMyFriend(userId: string): boolean {
    return clientModule.isMyFriend(userId) === 1
}

export function isReceiptEnabled(): boolean {
    return clientModule.isReceiptEnabled() === 1
}

export function watchOnlineState(conversationType: number, targets: string[], duration: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.watchOnlineState(conversationType, targets, duration, stringCallback(successCB), numberCallback(failCB))
}

export function isSupportBigFilesUpload(): boolean {
    return clientModule.isSupportBigFilesUpload() === 1
}

export function isUserReceiptEnabled(): boolean {
    return clientModule.isUserReceiptEnabled() === 1
}

export function allowGroupMember(groupId: string, isSet: boolean, memberIds: string[], notifyLines: number[], notifyContentStr: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.allowGroupMember(groupId, isSet, memberIds, notifyLines, notifyContentStr, voidCallback(successCB), numberCallback(failCB))
}

export function clearAllNotification(): void {
    // TODO
    //clientModule.clearAllNotification()
}

export function clearAllUnreadStatus(): void {
    clientModule.clearAllUnreadStatus()
}

export function clearMessages(conversation: string): void {
    clientModule.clearMessages(conversation)
}

export function clearMessagesByTime(conversation: string, before: number): void {
    clientModule.clearMessagesByTime(conversation, before)
}

export function clearRemoteConversationMessages(conversation: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.clearRemoteConversationMessages(conversation, voidCallback(successCB), numberCallback(failCB))
}

export function clearUnreadFriendRequestStatus(): void {
    clientModule.clearUnreadFriendRequestStatus()
}

export function clearUnreadStatus(conversation: string): void {
    clientModule.clearUnreadStatus(conversation)
}

export function configApplication(appId: string, appType: number, timestamp: number, nonceStr: string, signature: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.configApplication(appId, appType, timestamp, nonceStr, signature, voidCallback(successCB), numberCallback(failCB))
}

export function createChannel(name: string, portrait: string, status: number, desc: string, extra: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.createChannel(name, portrait, status, desc, extra, stringCallback(successCB), numberCallback(failCB))
}

export function createGroup(groupId: string, groupType: number, name: string, portrait: string, groupExtra: string, memberIds: string[], memberExtra: string, lines: number[], notifyContentStr: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.createGroup(groupId, groupType, name, portrait, groupExtra, memberIds, memberExtra, lines, notifyContentStr, stringCallback(successCB), numberCallback(failCB))
}

export function deleteFileRecord(messageUid: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteFileRecord(messageUid, voidCallback(successCB), numberCallback(failCB))
}


export function getMessagesV2(conversation: string, fromIndex: number, before: boolean, count: number, withUser: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getMessagesV2(conversation, [], fromIndex, before, count, withUser, stringCallback(successCB), numberCallback(failCB))
}

export function getConversationRead(conversation: string): string {
    return clientModule.getConversationRead(conversation)
}

export function deleteFriend(userId: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteFriend(userId, voidCallback(successCB), numberCallback(failCB))
}

export function deleteMessage(messageId: number): void {
    clientModule.deleteMessage(messageId)
}

export function deleteRemoteMessage(messageUid: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteRemoteMessage(messageUid, voidCallback(successCB), numberCallback(failCB))
}

export function destoryChannel(channelId: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.destoryChannel(channelId, voidCallback(successCB), numberCallback(failCB))
}


export function dismissGroup(groupId: string, lines: number[], messagePayload: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.dismissGroup(groupId, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function getAuthorizedMediaUrl(messaggeUid: string, mediaType: number, mediaPath: string, successCB: (value: object) => void, failCB: FailCallback): void {
    clientModule.getAuthorizedMediaUrl(messaggeUid, mediaType, mediaPath, variableParamsToArrayParamCallback(successCB), numberCallback(failCB))
}

export function getBlackList(refresh: boolean): string {
    return clientModule.getBlackList(refresh)
}

export function getChatroomInfo(chatroomId: string, updateDt: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getChatroomInfo(chatroomId, String(updateDt), stringCallback(successCB), numberCallback(failCB))
}

export function getChatroomMemberInfo(chatroomId: string, maxCount: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getChatroomMemberInfo(chatroomId, maxCount, stringCallback(successCB), numberCallback(failCB))
}

export function getConversationFiles(conversation: string, fromUser: string, beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO order
    clientModule.getConversationFiles(conversation, fromUser, beforeUid, count, 1, stringCallback(successCB), numberCallback(failCB))
}

export function getConversationFirstUnreadMessageId(conversation: string): number {
    return clientModule.getConversationFirstUnreadMessageId(conversation)
}

export function getConversationUnreadCount(conversation: string): string {
    return clientModule.getConversationUnreadCount(conversation)
}

export function getFriendAlias(userId: string): string {
    return clientModule.getFriendAlias(userId)
}

export function getFriendList(fresh: boolean): string {
    return clientModule.getFriendList(fresh)
}

export function getMyFiles(beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO order
    clientModule.getMyFiles(beforeUid, 1, count, stringCallback(successCB), numberCallback(failCB))
}

export function getOutgoingFriendRequest(): string {
    return clientModule.getOutgoingFriendRequest()
}

export function getRemoteMessage(messageUid: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getRemoteMessage(messageUid, stringCallback(successCB), numberCallback(failCB))
}

export function getRemoteMessages(conversation: string, beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO
    // types
    clientModule.getRemoteMessages(conversation, beforeUid, count, stringCallback(successCB), numberCallback(failCB), [])
}

export function getServerDeltaTime(): number {
    return clientModule.getServerDeltaTime()
}

export function getUnreadCount(types: number[], lines: number[]): string {
    return clientModule.getUnreadCount(types, lines)
}

export function getUploadMediaUrl(fileName: string, mediaType: number, contentType: string, successCB: (value: object) => void, failCB: FailCallback): void {
    clientModule.getUploadMediaUrl(fileName, mediaType, contentType, variableParamsToArrayParamCallback(successCB), numberCallback(failCB))
}

export function getUserInfoEx(userId: string, refresh: boolean, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getUserInfoEx(userId, refresh, stringCallback(successCB), numberCallback(failCB))
}

export function getUserMessages(userId: string, conversation: string, contentTypes: number[], fromIndex: number, before: boolean, count: number): string {
    // TODO
    //return clientModule.getUserMessages(userId, conversation, contentTypes, fromIndex, before, count)
    return ""
}

export function getUserMessagesEx(userId: string, conversationTypes: number[], lines: number[], contentTypes: number[], fromIndex: number, before: boolean, count: number): string {
    // TODO
    // return clientModule.getUserMessagesEx(userId, conversationTypes, lines, contentTypes, fromIndex, before, count)
    return ""
}

export function getUserMessagesExV2(userId: string, conversationTypes: number[], lines: number[], fromIndex: number, before: boolean, count: number, contentTypes: number[], successCB: StringCallback, failCB: FailCallback): void {
    // TODO
    // withUser
    clientModule.getUserMessagesExV2(userId, conversationTypes, lines, contentTypes, fromIndex, before, count, '', stringCallback(successCB), numberCallback(failCB))
}

export function getUserMessagesV2(userId: string, conversation: string, fromIndex: number, before: boolean, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO
    // contentTypes,
    // withUser
    clientModule.getUserMessagesV2(userId, conversation, [], fromIndex, before, count, '', stringCallback(successCB), numberCallback(failCB))
}

export function getUserSetting(scope: number, key: string): string {
    return clientModule.getUserSetting(scope, key)
}

export function handleFriendRequest(userId: string, accept: boolean, successCB: VoidCallback, failCB: FailCallback, extra: string): void {
    clientModule.handleFriendRequest(userId, accept, voidCallback(successCB), numberCallback(failCB), extra)
}

export function insertMessage(conversation: string, sender: string, messagePayload: string, status: number, notify: boolean, toUsers: string[], serverTime: number): void {
    clientModule.insertMessage(conversation, sender, messagePayload, status, notify, toUsers, serverTime);
}

export function isBlackListed(userId: string): boolean {
    return clientModule.isBlackListed(userId) === 1
}

export function isCommercialServer(): boolean {
    return clientModule.isCommercialServer() === 1
}

export function isEnableUserOnlineState(): boolean {
    return clientModule.isEnableUserOnlineState() === 1
}

export function isFavUser(userId: string): boolean {
    return clientModule.isFavUser(userId) === 1
}

export function isGlobalDisableSyncDraft(): boolean {
    return clientModule.isGlobalDisableSyncDraft() === 1
}

export function isGlobalSlient(): boolean {
    // TODO
    // return clientModule.isGlobalSlient() === 1
    return false
}

export function isHiddenNotificationDetail(): boolean {
    return clientModule.isHiddenNotificationDetail() === 1
}

export function isListenedChannel(channelId: string): boolean {
    return clientModule.isListenedChannel(channelId) === 1
}

export function joinChatroom(chatroomId: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.joinChatroom(chatroomId, voidCallback(successCB), numberCallback(failCB))
}

export function kickoffMembers(groupId: string, memberIds: string[], notifyLines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.kickoffMembers(groupId, memberIds, notifyLines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function listenChannel(channelId: string, listen: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.listenChannel(channelId, listen, voidCallback(successCB), numberCallback(failCB))
}

export function loadFriendRequestFromRemote(): void {
    clientModule.loadFriendRequestFromRemote()
}

export function modifyChannelInfo(channelId: string, type: number, newValue: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyChannelInfo(channelId, type, newValue, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupAlias(groupId: string, alias: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupAlias(groupId, alias, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupInfo(groupId: string, type: number, newValue: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupInfo(groupId, type, newValue, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupMemberAlias(groupId: string, memberId: string, alias: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupMemberAlias(groupId, memberId, alias, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupMemberExtra(groupId: string, memberId: string, extra: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupMemberExtra(groupId, memberId, extra, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyMyInfo(type: number, value: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyMyInfo(type, value, voidCallback(successCB), numberCallback(failCB))
}

export function muteGroupMember(groupId: string, isSet: boolean, memberIds: string[], notifyLines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.muteGroupMember(groupId, isSet, memberIds, notifyLines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function quitChatroom(chatroomId: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.quitChatroom(chatroomId, voidCallback(successCB), numberCallback(failCB))
}

export function quitGroup(groupId: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.quitGroup(groupId, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function quitGroupEx(groupId: string, keepMessage: boolean, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    // TODO
    //clientModule.quitGroupEx(groupId, keepMessage, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
    failCB?.(-1)
}

export function recall(messageUid: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.recall(messageUid, voidCallback(successCB), numberCallback(failCB))
}

export function removeConversation(conversation: string, clearMsg: boolean): void {
    clientModule.removeConversation(conversation, clearMsg)
}

export function searchChannel(keyword: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchChannel(keyword, stringCallback(successCB), numberCallback(failCB))
}

export function searchConversation(keyword: string, types: number[], lines: number[]): string {
    return clientModule.searchConversation(keyword, types, lines)
}

export function searchFiles(keyword: string, conversation: string, fromUser: string, beforeMessageId: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO
    // order
    clientModule.searchFiles(keyword, conversation, fromUser, beforeMessageId, 1, count, stringCallback(successCB), numberCallback(failCB))
}

export function searchFriends(keyword: string): string {
    return clientModule.searchFriends(keyword)
}

export function searchGroups(keyword: string): string {
    return clientModule.searchGroups(keyword)
}

export function searchMessage(conversation: string, keyword: string, withUser: string): string {
    return clientModule.searchMessage(conversation, keyword, withUser)
}

export function searchMessageByTypes(conversation: string, keyword: string, contentTypes: number[], desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageByTypes(conversation, keyword, contentTypes, desc, limit, offset, withUser)
}

export function searchMessageByTypesAndTimes(conversation: string, keyword: string, contentTypes: number[], startTime: number, endTime: number, desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageByTypesAndTimes(conversation, keyword, contentTypes, startTime, endTime, desc, limit, offset, withUser)
}

export function searchMessageEx(conversation: string, keyword: string, desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageEx(conversation, keyword, desc, limit, offset, withUser)
}

export function searchMessageEx2(conversationTypes: number[], lines: number[], contentTypes: number[], keyword: string, fromIndex: number, desc: boolean, count: number, withUser: string): string {
    return clientModule.searchMessageEx2(conversationTypes, lines, contentTypes, keyword, fromIndex, desc, count, withUser)
}

export function searchMyFiles(keyword: string, beforeMessageUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    // TODO
    // order
    clientModule.searchMyFiles(keyword, beforeMessageUid, 1, count, stringCallback(successCB), numberCallback(failCB))
}

export function searchUser(keyword: string, searchType: number, page: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchUser(keyword, searchType, page, stringCallback(successCB), numberCallback(failCB))
}

export function sendConferenceRequest(sessionId: string, roomId: string, request: string, data: string, advance: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.sendConferenceRequest(sessionId, roomId, request, data, voidCallback(successCB), numberCallback(failCB), advance)
}

export function sendFriendRequest(userId: string, reason: string, extra: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.sendFriendRequest(userId, reason, extra, voidCallback(successCB), numberCallback(failCB))
}

export function sendMessage(conversation: string, messagePayload: string, toUsers: string[], expireDuration: number, prepareCB: (value: object) => void, progressCB: (value: object) => void, successCB: (value: object) => void, failCB: FailCallback): void {
    // TODO
    // uploadedCallback
    clientModule.sendMessage(conversation, messagePayload, toUsers, expireDuration, variableParamsToArrayParamCallback(prepareCB), variableParamsToArrayParamCallback(progressCB), (...params: object[]) => {
        console.log('send message uploaded', ...params)
    }, variableParamsToArrayParamCallback(successCB), numberCallback(failCB))
}

export function setBackupAddress(backupHost: string, backupPort: number): void {
    clientModule.setBackupAddress(backupHost, backupPort);
}

export function setBackupAddressStrategy(strategy: number): void {
    clientModule.setBackupAddressStrategy(strategy)
}

export function setBlackList(userId: string, block: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setBlackList(userId, block, voidCallback(successCB), numberCallback(failCB))
}

export function setConversationDraft(conversation: string, draft: string): void {
    clientModule.setConversationDraft(conversation, draft)
}

export function setConversationSlient(conversation: string, silent: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setConversationSilent(conversation, silent, voidCallback(successCB), numberCallback(failCB))
}

export function setConversationTimestamp(conversation: string, timestamp: string): void {
    clientModule.setConversationTimestamp(conversation, Number(timestamp))
}

export function setConversationTop(conversation: string, top: number, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setConversationTop(conversation, top, voidCallback(successCB), numberCallback(failCB))
}

export function setDeviceToken(type: number, token: string): void {
    clientModule.setDeviceToken(type, token)
}

export function setFavGroup(groupId: string, fav: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFavGroup(groupId, fav, voidCallback(successCB), numberCallback(failCB))
}

export function setFavUser(userId: string, fav: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFavUser(userId, fav, voidCallback(successCB), numberCallback(failCB))
}

export function setFriendAlias(userId: string, alias: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFriendAlias(userId, alias, voidCallback(successCB), numberCallback(failCB))
}

export function setGlobalSlient(silent: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setGlobalSilent(silent, voidCallback(successCB), numberCallback(failCB))
}

export function setGroupManager(groupId: string, isSet: boolean, memberIds: string[], lines: number[], notifyContentStr: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setGroupManager(groupId, isSet, memberIds, lines, notifyContentStr, voidCallback(successCB), numberCallback(failCB))
}

export function setHiddenNotificationDetail(hide: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setHiddenNotificationDetail(hide, voidCallback(successCB), numberCallback(failCB))
}

export function setLastReceivedMessageUnRead(conversation: string, messageUid: string, timestamp: string): void {
    // TODO
    clientModule.setLastReceivedMessageUnRead(conversation)
}

export function setMediaMessagePlayed(messageId: number): void {
    clientModule.setMediaMessagePlayed(messageId)
}

export function setMessageLocalExtra(messageId: number, extra: string): void {
    clientModule.setMessageLocalExtra(messageId, extra)
}

export function setUserAgent(userAgent: string): void {
    clientModule.setUserAgent(userAgent)
}

export function setUserReceiptEnable(enable: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setUserReceiptEnable(enable, voidCallback(successCB), numberCallback(failCB))
}

export function setUserSetting(scope: number, key: string, value: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setUserSetting(scope, key, value, voidCallback(successCB), numberCallback(failCB))
}

export function transferGroup(groupId: string, newOwner: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.transferGroup(groupId, newOwner, lines, messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function unwatchOnlineState(conversationType: number, targets: string[], successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.unwatchOnlineState(conversationType, targets, voidCallback(successCB), numberCallback(failCB))
}

export function updateMessage(messageId: number, messagePayload: string): void {
    clientModule.updateMessage(messageId, messagePayload)
}

export function updateMessageStatus(messageId: number, status: number): void {
    clientModule.updateMessageStatus(messageId, status)
}

export function updateRemoteMessageContent(messageUid: string, messagePayload: string, distribute: boolean, updateLocal: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.updateRemoteMessageContent(messageUid, messagePayload, distribute, updateLocal, voidCallback(successCB), numberCallback(failCB))
}

export function uploadMedia(fileName: string, data: string, mediaType: number, successCB: VoidCallback, failCB: FailCallback, progressCB: (value: object) => void): void {
    clientModule.uploadMedia(fileName, data, mediaType, voidCallback(successCB), numberCallback(failCB), progressCB)
}

export function getMessage(messageId: number): string {
    return clientModule.getMessage(messageId)
}

export function getMessageByUid(messageUid: string): string {
    return clientModule.getMessageByUid(messageUid)
}

export function getGroupMember(groupId: string, memberId: string): string {
    return clientModule.getGroupMember(groupId, memberId)
}

/*
export function chooseFile()
export function notify(title, content);


 */

function voidCallback(cb: VoidCallback): (value: object) => void {
    return ((_?: object) => {
        cb()
    })
}

function stringCallback(cb: StringCallback): (value: string) => void {
    return ((value: string) => {
        cb(value as string)
    })
}

function numberCallback(cb: FailCallback): (value: number) => void {
    return ((value: number) => {
        cb(value as number)
    })
}

function genWfcEventListener(event: string): (...args: Object[]) => void {
    return (...params: Object[]) => {
        let args: Object[] = [event]
        args.push(...params)
        let obj = {
            'args': args
        } as Record<string, Object>

        wfcEventListener?.(obj)
    }
}

function variableParamsToArrayParamCallback(cb: (value: object) => void) {
    return (...params: object[]) => {
        cb(params)
    }
}

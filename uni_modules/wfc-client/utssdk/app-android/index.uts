/**
 * 引用 Android 系统库，示例如下：
 * import { Context } from "android.content.Context";
 * [可选实现，按需引入]
 */

/* 引入 interface.uts 文件中定义的变量 */
import {StringCallback, VoidCallback, FailCallback, SuccessCallback} from '../interface.uts';



import ClientModule from 'cn.wildfirechat.uni.client.ClientModule';

import Int from "kotlin.Int";

/**
 * 引入三方库
 * [可选实现，按需引入]
 *
 * 在 Android 平台引入三方库有以下两种方式：
 * 1、[推荐] 通过 仓储 方式引入，将 三方库的依赖信息 配置到 config.json 文件下的 dependencies 字段下。详细配置方式[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#dependencies)
 * 2、直接引入，将 三方库的aar或jar文件 放到libs目录下。更多信息[详见](https://uniapp.dcloud.net.cn/plugin/uts-plugin.html#android%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE)
 *
 * 在通过上述任意方式依赖三方库后，使用时需要在文件中 import，如下示例：
 * import { LottieAnimationView } from 'com.airbnb.lottie.LottieAnimationView'
 */

/**
 * UTSAndroid 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsandroid.html#utsandroid)
 */

let clientModule: ClientModule = ClientModule.getInstance();
let wfcEventListener: null | ((value: object) => void) = null

export function initProto(): void {
    clientModule.initProto(UTSAndroid.getAppContext())

    clientModule.setEventListener((channel: string, value: object) => {
        if (channel === 'wfc-event') {
            wfcEventListener?.(value)
        } else {

        }
    })
}

@UTSJS.keepAlive
export function onWfcEventListener(listener : (args: object) => void) {
    wfcEventListener = listener
}

export const getClientId = function (): string {
    return clientModule.getClientId();
}

export function connect(imHost: string, userId: string, token: string): void {
    clientModule.connect(imHost, userId, token)
}

export function getConnectionStatus(): number {
    return clientModule.getConnectionStatus();
}

export function registerMessageFlag(type: number, flag: number) {
    clientModule.registerMessageFlag(type.toInt(), flag.toInt())
}

export function useSM4() {
    clientModule.useSM4()
}

export function setProxyInfo(host: string, ip: string, port: number, userName: string, password: string) {
    clientModule.setProxyInfo(host, ip, port.toInt(), userName, password)
}


export function disconnect(disablePush: boolean, clearSession: boolean) {
    clientModule.disconnect(disablePush, clearSession)
}

export const getUserId = function (): string {
    return clientModule.getUserId();
}

export function addHttpHeader(header: string, value: string) {
    clientModule.addHttpHeader(header, value)
}


export function addMembers(groupId: string, memberIds: string[], extra: string, notifyLines: number[], notifyContentStr: string, successCB: () => void, failCB: (err: object) => void) {
    clientModule.addMembers(groupId, memberIds.toTypedArray(), extra, numberArrayToIntArray(notifyLines), notifyContentStr, (_: object) => {
        successCB()
    }, failCB)
}

export function getConversationInfos(types: number[], lines: number[]): string {
    let str = clientModule.getConversationInfos(numberArrayToIntArray(types), numberArrayToIntArray(lines))
    return str;
}

export function getUserSettings(scope: number): string {
    return clientModule.getUserSettings(scope.toInt())
}

export function getGroupInfo(groupId: string, fresh: boolean): string {
    return clientModule.getGroupInfo(groupId, fresh)
}

export function getUserInfo(userId: string, fresh: boolean, groupId: string): string {
    return clientModule.getUserInfo(userId, fresh, groupId)
}

export function getGroupMembers(groupId: string, fresh: boolean): string {
    return clientModule.getGroupMembers(groupId, fresh);
}

export function getUserInfos(userIds: string[], groupId: string): string {
    return clientModule.getUserInfos(userIds, groupId);
}

export function getConversationInfo(conversation: string): string {
    return clientModule.getConversationInfo(conversation)
}

export function getListenedChannels(): string {
    return clientModule.getListenedChannels();
}

export function getChannelInfo(channelId: string, refresh: boolean): string {
    return clientModule.getChannelInfo(channelId, refresh)
}

export function getMyFriendList(fresh: boolean): string {
    return clientModule.getMyFriendList(fresh)
}

export function getFavGroups(): string {
    return clientModule.getFavGroups()
}

export function getFavUsers(): string {
    return clientModule.getFavUsers();
}

export function getIncommingFriendRequest(): string {
    return clientModule.getIncommingFriendRequest();
}

export function getGroupInfos(groupIds: string[], fresh: boolean): string {
    return clientModule.getGroupInfos(groupIds.toKotlinList(), fresh)
    // return ''
}

export function getUnreadFriendRequestStatus(): number {
    return clientModule.getUnreadFriendRequestStatus()
}

export function isFavGroup(groupId: string): boolean {
    return clientModule.isFavGroup(groupId)
}

export function getAuthCode(appId: string, appType: Int, host: string, successCB: StringCallback, failCB: (err: object) => void) {
    clientModule.getAuthCode(appId, appType, host, (value: object) => {
        successCB(value as string)
    }, failCB)
}

export function isMyFriend(userId: string): boolean {
    return clientModule.isMyFriend(userId)
}

export function isReceiptEnabled(): boolean {
    return clientModule.isReceiptEnabled()
}

export function watchOnlineState(conversationType: number, targets: string[], duration: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.watchOnlineState(conversationType.toInt(), targets, duration.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function isSupportBigFilesUpload(): boolean {
    return clientModule.isSupportBigFilesUpload()
}

export function isUserReceiptEnabled(): boolean {
    return clientModule.isUserReceiptEnabled()
}

export function allowGroupMember(groupId: string, isSet: boolean, memberIds: string[], notifyLines: number[], notifyContentStr: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.allowGroupMember(groupId, isSet, memberIds, numberArrayToIntArray(notifyLines), notifyContentStr, voidCallback(successCB), numberCallback(failCB))
}

export function clearAllNotification(): void {
    clientModule.clearAllNotification()
}

export function clearAllUnreadStatus(): void {
    clientModule.clearAllUnreadStatus()
}

export function clearMessages(conversation: string): void {
    clientModule.clearMessages(conversation)
}

export function clearMessagesByTime(conversation: string, before: number): void {
    clientModule.clearMessagesByTime(conversation, before.toLong())
}

export function clearRemoteConversationMessages(conversation: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.clearRemoteConversationMessages(conversation, voidCallback(successCB), numberCallback(failCB))
}

export function clearUnreadFriendRequestStatus(): void {
    clientModule.clearUnreadFriendRequestStatus()
}

export function clearUnreadStatus(conversation: string): void {
    clientModule.clearUnreadStatus(conversation)
}

export function configApplication(appId: string, appType: number, timestamp: number, nonceStr: string, signature: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.configApplication(appId, appType.toInt(), timestamp.toLong(), nonceStr, signature, voidCallback(successCB), numberCallback(failCB))
}

export function createChannel(name: string, portrait: string, status: number, desc: string, extra: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.createChannel(name, portrait, status.toInt(), desc, extra, stringCallback(successCB), numberCallback(failCB))
}

export function createGroup(groupId: string, groupType: number, name: string, portrait: string, groupExtra: string, memberIds: string[], memberExtra: string, lines: number[], notifyContentStr: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.createGroup(groupId, groupType.toInt(), name, portrait, groupExtra, memberIds, memberExtra, numberArrayToIntArray(lines), notifyContentStr, stringCallback(successCB), numberCallback(failCB))
}

export function deleteFileRecord(messageUid: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteFileRecord(messageUid, voidCallback(successCB), numberCallback(failCB))
}


export function getMessagesV2(conversation: string, fromIndex: number, before: boolean, count: number, withUser: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getMessagesV2(conversation, fromIndex.toInt(), before, count.toInt(), withUser, stringCallback(successCB), numberCallback(failCB))
}

export function getConversationRead(conversation: string): string {
    return clientModule.getConversationRead(conversation)
}

export function deleteFriend(userId: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteFriend(userId, voidCallback(successCB), numberCallback(failCB))
}

export function deleteMessage(messageId: number): void {
    clientModule.deleteMessage(messageId.toLong())
}

export function deleteRemoteMessage(messageUid: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.deleteRemoteMessage(messageUid, voidCallback(successCB), numberCallback(failCB))
}

export function destoryChannel(channelId: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.destoryChannel(channelId, voidCallback(successCB), numberCallback(failCB))
}


export function dismissGroup(groupId: string, lines: number[], messagePayload: string, successCB: SuccessCallback, failCB: FailCallback): void {
    clientModule.dismissGroup(groupId, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function getAuthorizedMediaUrl(messaggeUid: string, mediaType: number, mediaPath: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getAuthorizedMediaUrl(messaggeUid, mediaType.toInt(), mediaPath, stringCallback(successCB), numberCallback(failCB))
}

export function getBlackList(): string {
    return clientModule.getBlackList()
}

export function getChatroomInfo(chatroomId: string, updateDt: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getChatroomInfo(chatroomId, updateDt.toLong(), stringCallback(successCB), numberCallback(failCB))
}

export function getChatroomMemberInfo(chatroomId: string, maxCount: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getChatroomMemberInfo(chatroomId, maxCount.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function getConversationFiles(conversation: string, fromUser: string, beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getConversationFiles(conversation, fromUser, beforeUid, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function getConversationFirstUnreadMessageId(conversation: string): number {
    return clientModule.getConversationFirstUnreadMessageId(conversation)
}

export function getConversationUnreadCount(conversation: string): string {
    return clientModule.getConversationUnreadCount(conversation)
}

export function getFriendAlias(userId: string): string {
    return clientModule.getFriendAlias(userId)
}

export function getFriendList(fresh: boolean): string {
    return clientModule.getFriendList(fresh)
}

// no add
export function getMyFiles(beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getMyFiles(beforeUid, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function getOutgoingFriendRequest(): string {
    return clientModule.getOutgoingFriendRequest()
}

export function getRemoteMessage(messageUid: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getRemoteMessage(messageUid, stringCallback(successCB), numberCallback(failCB))
}

export function getRemoteMessages(conversation: string, beforeUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getRemoteMessages(conversation, beforeUid, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function getServerDeltaTime(): number {
    return clientModule.getServerDeltaTime()
}

export function getUnreadCount(types: number[], lines: number[]): string {
    return clientModule.getUnreadCount(numberArrayToIntArray(types), numberArrayToIntArray(lines))
}

export function getUploadMediaUrl(fileName: string, mediaType: number, contentType: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getUploadMediaUrl(fileName, mediaType.toInt(), contentType, stringCallback(successCB), numberCallback(failCB))
}

export function getUserInfoEx(userId: string, refresh: boolean, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getUserInfoEx(userId, refresh, stringCallback(successCB), numberCallback(failCB))
}

export function getUserMessages(userId: string, conversation: string, contentTypes: number[], fromIndex: number, before: boolean, count: number): string {
    return clientModule.getUserMessages(userId, conversation, numberArrayToIntArray(contentTypes), fromIndex.toInt(), before, count.toInt())
}

export function getUserMessagesEx(userId: string, conversationTypes: number[], lines: number[], contentTypes: number[], fromIndex: number, before: boolean, count: number): string {
    return clientModule.getUserMessagesEx(userId, numberArrayToIntArray(conversationTypes), numberArrayToIntArray(lines), numberArrayToIntArray(contentTypes), fromIndex.toInt(), before, count.toInt())
}

export function getUserMessagesExV2(userId: string, conversationTypes: number[], lines: number[], fromIndex: number, before: boolean, count: number, contentTypes: number[], successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getUserMessagesExV2(userId, numberArrayToIntArray(conversationTypes), numberArrayToIntArray(lines), fromIndex.toInt(), before, count.toInt(), numberArrayToIntArray(contentTypes), stringCallback(successCB), numberCallback(failCB))
}

export function getUserMessagesV2(userId: string, conversation: string, fromIndex: number, before: boolean, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.getUserMessagesV2(userId, conversation, fromIndex.toInt(), before, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function getUserSetting(scope: number, key: string): string {
    return clientModule.getUserSetting(scope.toInt(), key)
}

export function handleFriendRequest(userId: string, accept: boolean, successCB: VoidCallback, failCB: FailCallback, extra: string): void {
    clientModule.handleFriendRequest(userId, accept, voidCallback(successCB), numberCallback(failCB), extra)
}

export function insertMessage(conversation: string, sender: string, messagePayload: string, status: number, notify: boolean, toUsers: string[], serverTime: number): void {
    clientModule.insertMessage(conversation, sender, messagePayload, status.toInt(), notify, toUsers, serverTime.toLong());
}

export function isBlackListed(userId: string): boolean {
    return clientModule.isBlackListed(userId)
}

export function isCommercialServer(): boolean {
    return clientModule.isCommercialServer()
}

export function isEnableUserOnlineState(): boolean {
    return clientModule.isEnableUserOnlineState()
}

export function isFavUser(userId: string): boolean {
    return clientModule.isFavUser(userId)
}

export function isGlobalDisableSyncDraft(): boolean {
    return clientModule.isGlobalDisableSyncDraft()
}

export function isGlobalSlient(): boolean {
    return clientModule.isGlobalSlient()
}

export function isHiddenNotificationDetail(): boolean {
    return clientModule.isHiddenNotificationDetail()
}

export function isListenedChannel(channelId: string): boolean {
    return clientModule.isListenedChannel(channelId)
}

export function joinChatroom(chatroomId: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.joinChatroom(chatroomId, voidCallback(successCB), numberCallback(failCB))
}

export function kickoffMembers(groupId: string, memberIds: string[], notifyLines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.kickoffMembers(groupId, memberIds, numberArrayToIntArray(notifyLines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function listenChannel(channelId: string, listen: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.listenChannel(channelId, listen, voidCallback(successCB), numberCallback(failCB))
}

export function loadFriendRequestFromRemote(): void {
    clientModule.loadFriendRequestFromRemote()
}

export function modifyChannelInfo(channelId: string, type: number, newValue: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyChannelInfo(channelId, type.toInt(), newValue, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupAlias(groupId: string, alias: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupAlias(groupId, alias, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupInfo(groupId: string, type: number, newValue: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupInfo(groupId, type.toInt(), newValue, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupMemberAlias(groupId: string, memberId: string, alias: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupMemberAlias(groupId, memberId, alias, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyGroupMemberExtra(groupId: string, memberId: string, extra: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyGroupMemberExtra(groupId, memberId, extra, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function modifyMyInfo(type: number, value: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.modifyMyInfo(type.toInt(), value, voidCallback(successCB), numberCallback(failCB))
}

export function muteGroupMember(groupId: string, isSet: boolean, memberIds: string[], notifyLines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.muteGroupMember(groupId, isSet, memberIds, numberArrayToIntArray(notifyLines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function quitChatroom(chatroomId: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.quitChatroom(chatroomId, voidCallback(successCB), numberCallback(failCB))
}

export function quitGroup(groupId: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.quitGroup(groupId, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function quitGroupEx(groupId: string, keepMessage: boolean, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.quitGroupEx(groupId, keepMessage, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function recall(messageUid: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.recall(messageUid, voidCallback(successCB), numberCallback(failCB))
}

export function removeConversation(conversation: string, clearMsg: boolean): void {
    clientModule.removeConversation(conversation, clearMsg)
}

export function searchChannel(keyword: string, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchChannel(keyword, stringCallback(successCB), numberCallback(failCB))
}

export function searchConversation(keyword: string, types: number[], lines: number[]): string {
    return clientModule.searchConversation(keyword, numberArrayToIntArray(types), numberArrayToIntArray(lines))
}

export function searchFiles(keyword: string, conversation: string, fromUser: string, beforeMessageId: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchFiles(keyword, conversation, fromUser, beforeMessageId, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function searchFriends(keyword: string): string {
    return clientModule.searchFriends(keyword)
}

export function searchGroups(keyword: string): string {
    return clientModule.searchGroups(keyword)
}

export function searchMessage(conversation: string, keyword: string, withUser: string): string {
    return clientModule.searchMessage(conversation, keyword, withUser)
}

export function searchMessageByTypes(conversation: string, keyword: string, contentTypes: number[], desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageByTypes(conversation, keyword, numberArrayToIntArray(contentTypes), desc, limit.toInt(), offset.toInt(), withUser)
}

export function searchMessageByTypesAndTimes(conversation: string, keyword: string, contentTypes: number[], startTime: number, endTime: number, desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageByTypesAndTimes(conversation, keyword, numberArrayToIntArray(contentTypes), startTime.toLong(), endTime.toLong(), desc, limit.toInt(), offset.toInt(), withUser)
}

export function searchMessageEx(conversation: string, keyword: string, desc: boolean, limit: number, offset: number, withUser: string): string {
    return clientModule.searchMessageEx(conversation, keyword, desc, limit.toInt(), offset.toInt(), withUser)
}

export function searchMessageEx2(conversationTypes: number[], lines: number[], contentTypes: number[], keyword: string, fromIndex: number, desc: boolean, count: number, withUser: string): string {
    return clientModule.searchMessageEx2(numberArrayToIntArray(conversationTypes), numberArrayToIntArray(lines), numberArrayToIntArray(contentTypes), keyword, fromIndex.toInt(), desc, count.toInt(), withUser)
}

export function searchMyFiles(keyword: string, beforeMessageUid: string, count: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchMyFiles(keyword, beforeMessageUid, count.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function searchUser(keyword: string, searchType: number, page: number, successCB: StringCallback, failCB: FailCallback): void {
    clientModule.searchUser(keyword, searchType.toInt(), page.toInt(), stringCallback(successCB), numberCallback(failCB))
}

export function sendConferenceRequest(sessionId: string, roomId: string, request: string, data: string, advance: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.sendConferenceRequest(sessionId.toLong(), roomId, request, data, advance, voidCallback(successCB), numberCallback(failCB))
}

export function sendFriendRequest(userId: string, reason: string, extra: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.sendFriendRequest(userId, reason, extra, voidCallback(successCB), numberCallback(failCB))
}

export function sendMessage(conversation: string, messagePayload: string, toUsers: string[], expireDuration: number, prepareCB: (value: object) => void, progressCB: (value: object) => void, successCB: (value: object) => void, failCB: FailCallback): void {
    clientModule.sendMessage(conversation, messagePayload, toUsers, expireDuration.toInt(), prepareCB, progressCB, successCB, numberCallback(failCB))
}

export function setBackupAddress(backupHost: string, backupPort: number): void {
    clientModule.setBackupAddress(backupHost, backupPort.toInt());
}

export function setBackupAddressStrategy(strategy: number): void {
    clientModule.setBackupAddressStrategy(strategy.toInt())
}

export function setBlackList(userId: string, block: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setBlackList(userId, block, voidCallback(successCB), numberCallback(failCB))
}

export function setConversationDraft(conversation: string, draft: string): void {
    clientModule.setConversationDraft(conversation, draft)
}

export function setConversationSlient(conversation: string, silent: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setConversationSlient(conversation, silent, voidCallback(successCB), numberCallback(failCB))
}

export function setConversationTimestamp(conversation: string, timestamp: string): void {
    clientModule.setConversationTimestamp(conversation, timestamp)
}

export function setConversationTop(conversation: string, top: number, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setConversationTop(conversation, top.toInt(), voidCallback(successCB), numberCallback(failCB))
}

export function setDeviceToken(type: number, token: string): void {
    clientModule.setDeviceToken(type.toInt(), token)
}

export function setFavGroup(groupId: string, fav: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFavGroup(groupId, fav, voidCallback(successCB), numberCallback(failCB))
}

export function setFavUser(userId: string, fav: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFavUser(userId, fav, voidCallback(successCB), numberCallback(failCB))
}

export function setFriendAlias(userId: string, alias: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setFriendAlias(userId, alias, voidCallback(successCB), numberCallback(failCB))
}

export function setGlobalSlient(silent: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setGlobalSlient(silent, voidCallback(successCB), numberCallback(failCB))
}

export function setGroupManager(groupId: string, isSet: boolean, memberIds: string[], lines: number[], notifyContentStr: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setGroupManager(groupId, isSet, memberIds, numberArrayToIntArray(lines), notifyContentStr, voidCallback(successCB), numberCallback(failCB))
}

export function setHiddenNotificationDetail(hide: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setHiddenNotificationDetail(hide, voidCallback(successCB), numberCallback(failCB))
}

export function setLastReceivedMessageUnRead(conversation: string, messageUid: string, timestamp: string): void {
    clientModule.setLastReceivedMessageUnRead(conversation, messageUid, timestamp)
}

export function setMediaMessagePlayed(messageId: number): void {
    clientModule.setMediaMessagePlayed(messageId.toInt())
}

export function setMessageLocalExtra(messageId: number, extra: string): void {
    clientModule.setMessageLocalExtra(messageId.toInt(), extra)
}

export function setUserAgent(userAgent: string): void {
    clientModule.setUserAgent(userAgent)
}

export function setUserReceiptEnable(enable: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setUserReceiptEnable(enable, voidCallback(successCB), numberCallback(failCB))
}

export function setUserSetting(scope: number, key: string, value: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.setUserSetting(scope.toInt(), key, value, voidCallback(successCB), numberCallback(failCB))
}

export function transferGroup(groupId: string, newOwner: string, lines: number[], messagePayload: string, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.transferGroup(groupId, newOwner, numberArrayToIntArray(lines), messagePayload, voidCallback(successCB), numberCallback(failCB))
}

export function unwatchOnlineState(conversationType: number, targets: string[], successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.unwatchOnlineState(conversationType.toInt(), targets, voidCallback(successCB), numberCallback(failCB))
}

export function updateMessage(messageId: number, messagePayload: string): void {
    clientModule.updateMessage(messageId.toLong(), messagePayload)
}

export function updateMessageStatus(messageId: number, status: number): void {
    clientModule.updateMessageStatus(messageId.toLong(), status.toInt())
}

export function updateRemoteMessageContent(messageUid: string, messagePayload: string, distribute: boolean, updateLocal: boolean, successCB: VoidCallback, failCB: FailCallback): void {
    clientModule.updateRemoteMessageContent(messageUid, messagePayload, distribute, updateLocal, voidCallback(successCB), numberCallback(failCB))
}

export function uploadMedia(fileName: string, data: string, mediaType: number, successCB: VoidCallback, failCB: FailCallback, progressCB: (value: object) => void): void {
    clientModule.uploadMedia(fileName, data, mediaType.toInt(), voidCallback(successCB), numberCallback(failCB), progressCB)
}

export function getMessage(messageId: number): string {
    return clientModule.getMessage(messageId.toLong())
}

export function getMessageByUid(messageUid: string): string {
    return clientModule.getMessageByUid(messageUid)
}

export function getGroupMember(groupId: string, memberId: string): string {
    return clientModule.getGroupMember(groupId, memberId)
}

/*
export function chooseFile()
export function notify(title, content);


 */

function voidCallback(cb: VoidCallback): (value: object) => void {
    return ((_?: object) => {
        cb()
    })
}

function stringCallback(cb: StringCallback): (value: object) => void {
    return ((value: object) => {
        cb(value as string)
    })
}

function numberCallback(cb: FailCallback): (value: object) => void {
    return ((value: object) => {
        cb(value as number)
    })
}

function numberArrayToIntArray(numbers: number[]): Int[] {
    let ints: Int[] = []
    numbers.forEach(t => {
        ints.push(t.toInt())
    })
    return ints
}


// class UtsWfcClient {
// 	getClientId() : string {
// 		return clientModule.getClientId()
// 	}
// }

// const utsWfcClient = new UtsWfcClient();

// export function getUtsWfcClient() : UtsWfcClient {
// 	return utsWfcClient
// }


/**
 * 更多插件开发的信息详见：https://uniapp.dcloud.net.cn/plugin/uts-plugin.html
 */
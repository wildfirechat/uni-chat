export const add: (a: number, b: number, c: string) => number;
export const getRoutePort: () => number;
export const useSM4: () => void;
export const useAES256: () => void;
export const useTcpShortLink: () => void;
export const isTcpShortLink: () => number;
export const setLiteMode: (liteMode: boolean) => void;
export const setDBPath: (dbPath: string) => void;
export const setPackageName: (packageName: string) => void;
export const setAppName: (appName: string) => void;
export const setBackupAddressStrategy: (strategy: number) => void;
export const setBackupAddress: (host: string, port: number) => void;
export const setUserAgent: (agent: string) => void;
export const addHttpHeader: (header: string, value: string) => void;
export const setPlatform: (platform: number) => void;
export const connect: (userId: string, token: string) => number;
export const onAppResume: () => void;
export const onAppSuspend: () => void;
export const setDeviceToken: (pushType: number, deviceToken: string) => void;
export const disconnect: (disablePush:boolean, clearSession: boolean) => void;
export const setConnectionStatusListener: (a: Function) => void;
export const setProxyInfo: (host: string, ip: string, port: number, name: string, password: string) => void;
export const beginTransaction: () => number;
export const commitTransaction: () => number;
export const rollbackTransaction: () => number;
export const setConnectToServerListener: (connectedCB: Function) => void;
export const setReceiveMessageListener: (recvMsgCB: Function, recallCB: Function, deletedMsgCB: Function, deliveryCB: Function, readedCB: Function) => void;
export const setUserInfoUpdateListener: (userInfoUpdatedCB: Function) => void;
export const setGroupInfoUpdateListener: (cb: Function) => void;
export const setGroupMemberUpdateListener: (cb: Function) => void;
export const setFriendUpdateListener: (cb: Function) => void;
export const setFriendRequestListener: (cb: Function) => void;
export const setSettingUpdateListener: (cb: Function) => void;
export const setChannelInfoUpdateListener: (cb: Function) => void;
export const setConferenceEventListener: (cb: Function) => void;
export const setOnlineEventListener: (cb: Function) => void;
export const setSecretChatStateListener: (cb: Function) => void;
export const setSecretMessageBurnStateListener: (startBurnCB: Function, burnedCB: Function) => void;
export const isLogin: () => number;
export const getConnectionStatus: () => number;
export const getClientId: () => string;
export const getProtoRevision: () => string;
export const getCurrentUserId: () => string;
export const getServerDeltaTime: () => number;
export const getConversationInfos: (conversationTypes: number[], lines: number[]) => string;
export const registerMessageFlag: (contentType: number, flag: number) => void;
export const getConversationInfo: (conversationStr: string) => string;
export const searchConversation: (keyword: string, conversationTypes: number[], lines: number[]) => string;
export const searchConversationEx: (keyword: string, conversationTypes: number[], lines: number[], stringTime: number, endTime: number, desc: boolean, limit: number, offset: number) => string;
export const searchConversationEx2: (keyword: string, conversationTypes: number[], lines: number[], conTyps: number[], stringTime: number, endTime: number, desc: boolean, limit: number, offset: number, onlyMentionedMsg: boolean) => string;
export const removeConversation: (conversationStr: string, clearMsg: boolean) => void;
export const setConversationTop: (conversationStr: string, top: number, successCB: Function, errorCB: Function) => void;
export const setConversationSilent: (conversationStr: string, isSilent: boolean, successCB: Function, errorCB: Function) => void;
export const setConversationDraft: (conversationStr: string, draft: string) => void;
export const setConversationTimestamp: (conversationStr: string, timestamp: number) => void;
export const getUnreadCount: (conversationTypes: number[], lines: number[]) => string;
export const getConversationUnreadCount: (conversationStr: string) => string;
export const clearUnreadStatus: (conversationStr: string) => void;
export const clearMessageUnreadStatus: (messageId: number) => void;
export const clearMessageUnreadStatusBefore: (conversationStr: string, messageId: number) => void;
export const setLastReceivedMessageUnRead: (conversationStr: string) => string;
export const clearAllUnreadStatus: () => void;
export const getConversationFirstUnreadMessageId: (conversationStr: string) => number;
export const setMediaMessagePlayed: (messageId: number) => void;
export const setMessageLocalExtra: (messageId: number, extra: string) => void;
export const getMessagesV2: (conversationStr: string, contTypes: number[], fromIndex: number, direction: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getMentionedMessages: (conversationStr: string, fromIndex: number, direction: boolean, count: number, successCB: Function, errorCB: Function) => void;
export const getMessagesExV2: (conversationTypes: number[], lines: number[], cntTypes: number[], fromIndex: number, direction: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getMessagesEx2V2: (conversationTypes: number[], lines: number[], statuses: number[], fromIndex: number, direction: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getMessagesByTimestampV2: (conversationStr: string, cntTypes: number[], timestamp: number, before: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getMessagesByStatusV2: (conversationStr: string, statuss: number[], fromIndex: number, before: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getUserMessagesV2: (userId: string, conversationStr: string, cntTypes: number[], fromIndex: number, direction: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getUserMessagesExV2: (userId: string, conversationTypes: number[], lines: number[], cntTypes: number[], fromIndex: number, direction: boolean, count: number, withUser: string, successCB: Function, errorCB: Function) => void;
export const getRemoteMessages: (conversationStr: string, startMsgUid: string, count: number, successCB: Function, errorCB: Function, types:number[]) => void;
export const getRemoteMessage: (startMsgUid: string, successCB: Function, errorCB: Function) => void;
export const getMessage: (messageId: number) => string;
export const getMessageByUid: (messageUid: string) => string;
export const searchMessage: (conversationStr: string, keyword: string, withUser: string) => string;
export const searchMentionedMessages: (conversationStr: string, keyword: string, desc: boolean, limit: number, offset: number) => string;
export const searchMessageEx: (conversationStr: string, keyword: string, desc: boolean, limit: number, offset: number, withUser: string) => string;
export const searchMessageByTypes: (conversationStr: string, keyword: string, contTypes: number[], desc: boolean, limit: number, offset: number, withUser: string) => string;
export const searchMessageByTypesAndTimes: (conversationStr: string, keyword: string, contTypes: number[], startTime: number, endTime: number, desc: boolean, limit: number, offset: number, withUser: string) => string;
export const searchMessageEx2: (conversationTypes: number[], lines: number[], contTypes: number[], keyword: string, fromIndex: number, before: boolean, count: number, withUser: string) => string;
export const searchMentionedMessagesEx: (conversationTypes: number[], lines: number[], keyword: string, desc: boolean, count: number, offset: number) => string;
export const sendMessage: (conversationStr: string, messagePayload: string, toUsers: string[], expireDuration: number, preparedCB: Function, progressCB: Function, uploadedCB: Function, successCB: Function, errorCB: Function) => string;
export const sendSavedMessage: (messageId: number, expireDuration: number, successCB: Function, errorCB: Function) => number;
export const cancelSendingMessage: (messageId: number) => number;
export const sendConferenceRequest: (strSessionId: string, roomId: string, request: string, data: string, successCB: Function, errorCB: Function, advance: boolean) => void;
export const recall: (messageUid: string, successCB: Function, errorCB: Function) => void;
export const deleteRemoteMessage: (messageUid: string, successCB: Function, errorCB: Function) => void;
export const updateRemoteMessageContent: (messageUid: string, messagePayload: string, distribute: boolean, updateLocal: boolean, successCB: Function, errorCB: Function) => void;
export const uploadMedia: (name: string, data: string, mediaType: number, successCB: Function, errorCB: Function, progressCB: Function) => void;
export const deleteMessage: (messageId: number) => boolean;
export const batchDeleteMessages: (messageUids: number[]) => boolean;
export const clearMessages: (conversationStr: string) => void;
export const clearMessagesByTime: (conversationStr: string, before: number) => void;
export const clearMessagesKeepLatest: (conversationStr: string, keepCount: number) => void;
export const clearUserMessages: (userId: string, start: number, end: number) => void;
export const clearAllMessages: (removeConversation: boolean) => void;
export const clearRemoteConversationMessages: (conversationStr: string, successCB: Function, errorCB: Function) => void;
export const insertMessage: (conversationStr: string, from: string, content: string, status: number, notify: boolean, toUsers: string[], serverTime: number) => string;
export const insertMessageEx: (messageUid: string, conversationStr: string, from: string, content: string, status: number, serverTime: number, localExtra: string) => string;
export const updateMessage: (messageId: number, content: string) => void;
export const updateMessageStatus: (messageId: number, status: number) => void;
export const getUserInfo: (userId: string, refresh: boolean, groupId: string) => string;
export const getUserInfos: (userIds: string[], groupId: string) => string;
export const getUserInfoEx: (userId: string, refresh: boolean, successCB: Function, errorCB: Function) => void;
export const searchUser: (keyword: string, searchType: number, page: number, successCB: Function, errorCB: Function) => void;
export const isMyFriend: (userId: string) => number;
export const getMyFriendList: (refresh: boolean) => string;
export const getFriendList: (refresh: boolean) => string;
export const searchFriends: (keyword: string) => string;
export const searchGroups: (keyword: string) => string;
export const getIncommingFriendRequest: () => string;
export const getOutgoingFriendRequest: () => string;
export const getFriendRequest: (userId: string, incoming: boolean) => string;
export const loadFriendRequestFromRemote: () => void;
export const getUnreadFriendRequestStatus: () => number;
export const clearUnreadFriendRequestStatus: () => void;
export const deleteFriend: (userId: string, successCB: Function, errorCB: Function) => void;
export const getFriendAlias: (userId: string) => string;
export const setFriendAlias: (userId: string, alias: string, successCB: Function, errorCB: Function) => void;
export const getFriendExtra: (userId: string) => string;
export const sendFriendRequest: (userId: string, reason: string, extra: string, successCB: Function, errorCB: Function) => void;
export const handleFriendRequest: (userId: string, accept: boolean, successCB: Function, errorCB: Function, extra: string) => void;
export const isBlackListed: (userId: string) => number;
export const getBlackList: (refresh: boolean) => string;
export const setBlackList: (userId: string, isBlackListed: boolean, successCB: Function, errorCB: Function) => void;
export const getGroupMembers: (groupId: string, refresh: boolean) => string;
export const getGroupMembersByType: (groupId: string, type: number) => string;
export const getGroupMembersByCount: (groupId: string, count: number) => string;
export const getGroupMembersEx: (groupId: string, refresh: boolean, successCB: Function, errorCB: Function) => void;
export const getGroupInfo: (groupId: string, refresh: boolean) => string;
export const getGroupInfos: (groupIds: string[], refresh: boolean) => string;
export const getGroupInfoEx: (groupId: string, refresh: boolean, successCB: Function, errorCB: Function) => void;
export const getGroupMember: (groupId: string, memberId: string) => string;
export const createGroup: (groupId: string, groupType: number, groupName: string, portrait: string, groupExtra: string, members: string[], memberExtra:string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const addMembers: (members: string[], groupId: string, extra: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const kickoffMembers: (groupId: string, members: string[], lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const quitGroup: (groupId: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const dismissGroup: (groupId: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const modifyGroupInfo: (groupId: string, type: number, newValue: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const modifyGroupAlias: (groupId: string, alias: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const modifyGroupMemberAlias: (groupId: string, memberId: string, alias: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const modifyGroupMemberExtra: (groupId: string, memberId: string, extra: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const transferGroup: (groupId: string, newOwner: string, lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const setGroupManager: (groupId: string, isSet: boolean, members: string[], lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const muteGroupMember: (groupId: string, isSet: boolean, members: string[], lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const allowGroupMember: (groupId: string, isSet: boolean, members: string[], lines: number[], content: string, successCB: Function, errorCB: Function) => void;
export const setGroupRemark: (groupId: string, remark: string, successCB: Function, errorCB: Function) => void;
export const getGroupRemark: (groupId: string) => string;
export const getFavGroups: () => string;
export const isFavGroup: (groupId: string) => number;
export const setFavGroup: (groupId: string, fav: boolean, successCB: Function, errorCB: Function) => void;
export const getMyGroups: (successCB: Function, errorCB: Function) => void;
export const getCommonGroups: (userId: string, successCB: Function, errorCB: Function) => void;
export const getFavUsers: () => string;
export const isFavUser: (userId: string) => number;
export const setFavUser: (userId: string, fav: boolean, successCB: Function, errorCB: Function) => void;
export const getUserSetting : (scope: number, key: string) => string;
export const getUserSettings: (scope: number) => string;
export const setUserSetting: (scope: number, key: string, value:string, successCB: Function, errorCB: Function) => void;
export const modifyMyInfo: (type: number, value: string, successCB: Function, errorCB: Function) => void;
export const isGlobalSilent: () => number;
export const setGlobalSilent: (silent: boolean, successCB: Function, errorCB: Function) => void;
export const isHiddenNotificationDetail: () => number;
export const setHiddenNotificationDetail: (hidden: boolean, successCB: Function, errorCB: Function) => void;
export const isHiddenGroupMemberName: (groupId: string) => number;
export const setHiddenGroupMemberName: (groupId: string, hidden: boolean, successCB: Function, errorCB: Function) => void;
export const isUserReceiptEnabled: () => number;
export const setUserReceiptEnable: (enable: boolean, successCB: Function, errorCB: Function) => void;
export const joinChatroom: (chatroomId: string, successCB: Function, errorCB: Function) => void;
export const quitChatroom: (chatroomId: string, successCB: Function, errorCB: Function) => void;
export const getChatroomInfo: (chatroomId: string, version: string, successCB: Function, errorCB: Function) => void;
export const getChatroomMemberInfo: (chatroomId: string, count: number, successCB: Function, errorCB: Function) => void;
export const createChannel: (channelName: string, channelPortrait: string, status: number, desc: string, extra: string, successCB: Function, errorCB: Function) => void;
export const getChannelInfo: (channelId: string, refresh: boolean) => string;
export const modifyChannelInfo: (channelId: string, type: number, newValue: string, successCB: Function, errorCB: Function) => void;
export const searchChannel: (keyword: string, successCB: Function, errorCB: Function) => void;
export const isListenedChannel: (channelId: string ) => number;
export const listenChannel: (channelId: string, listen: boolean, successCB: Function, errorCB: Function) => void;
export const getMyChannels: () => string;
export const getRemoteListenedChannels: (successCB: Function, errorCB: Function) => void;
export const destoryChannel: (channelId: string, successCB: Function, errorCB: Function) => void;
export const getImageThumbPara: () => string;
export const getAuthorizedMediaUrl: (messageUid: string, mediaType: number, mediaUrl: string, successCB: Function, errorCB: Function) => void;
export const isSupportBigFilesUpload: () => number;
export const forcePresignedUrlUpload: () => number;
export const getUploadMediaUrl: (fileName: string, mediaType: number, contentType: string, successCB: Function, errorCB: Function) => void;
export const getAuthCode: (appId: string, appType: number, host: string, successCB: Function, errorCB: Function) => void;
export const configApplication: (appId: string, appType: number, timestamp: number, nonce: string, signature: string, successCB: Function, errorCB: Function) => void;
export const getAppPath: () => string;
export const setLanguage: (language: string) => void;
export const encodedCid: () => string;
export const getHost: () => string;
export const isCommercialServer: () => number;
export const isReceiptEnabled: () => number;
export const isGroupReceiptEnabled: () => number;
export const isGlobalDisableSyncDraft: () => number;
export const isEnableUserOnlineState: () => number;
export const getConversationRead: (conversationStr: string) => string;
export const getMessageDelivery: (conversationStr: string) => string;
export const encodeData: (data: string) => string;
export const decodeData: (data: string) => string;
export const getConversationFiles: (conversationStr: string, fromUser: string, messageUid: string, order: number, count: Number, successCB: Function, errorCB: Function) => void;
export const getMyFiles: (messageUid: string, order: number, count: Number, successCB: Function, errorCB: Function) => void;
export const deleteFileRecord: (messageUid: string, successCB: Function, errorCB: Function) => void;
export const searchFiles: (keyword: string, conversationStr: string, fromUser: string, messageUid: string, order: number, count: number, successCB: Function, errorCB: Function) => void;
export const searchMyFiles: (keyword: string, messageUid: string, order: number, count: number, successCB: Function, errorCB: Function) => void;
export const watchOnlineState: (conversationType: number, targets: string[], duration: number, successCB: Function, errorCB: Function) => void;
export const unwatchOnlineState: (conversationType: number, targets: string[], successCB: Function, errorCB: Function) => void;
export const createSecretChat: (userId: string, successCB: Function, errorCB: Function) => void;
export const destroySecretChat: (targetId: string, successCB: Function, errorCB: Function) => void;
export const getSecretChatInfo: (targetId: string) => string;
export const encodeSecretChatMediaData: (targetId: string, data: string) => string;
export const decodeSecretChatMediaData: (targetId: string, data: string) => string;
export const setSecretChatBurnTime: (targetId: string, second: number) => void;
export const isEnableSecretChat: () => number;
export const isUserEnableSecretChat: () => number;
export const setUserEnableSecretChat: (enable: boolean, successCB: Function, errorCB: Function) => void;
export const requireLock: (lockId: string, duration: number, successCB: Function, errorCB: Function) => void;
export const releaseLock: (lockId: string, successCB: Function, errorCB: Function) => void;
